module Google
  module Protobuf
    class Map[unchecked out K, unchecked out V]
      include Enumerable[[K, V]]

      public

      def ==: (untyped) -> bool

      def []: (K) -> V?

      def []=: (K, V) -> void

      def clear: () -> void

      def delete: (K) -> V

      def each: () { ([K, V] arg0) -> void } -> void

      def has_key?: (K) -> bool

      def keys: () -> Array[K]

      def length: () -> Integer

      def merge: (untyped) -> instance

      def size: () -> Integer

      def to_h: () -> Hash[K, V]

      def values: () -> Array[V]

      private

      def initialize: (Symbol key_type, Symbol value_type) -> void
    end
  end
end
